<!DOCTYPE html>
<html>
<head>
	<title>History of C#</title>
  <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto+Condensed" rel="stylesheet">
  <style type="text/css">

    body{
      background: #2E2E2E;
    }

    table{
      font-family: 'Montserrat'; 
      color: #FEFEFE;
    }

    .title{
      color: #FEFEFE;
      font-size: 300%; 
      text-align: center;
    }

    .cVersion{
      font-size: 150%; 
      text-align: center;
    }

    .cDesc{
      font-size: 100%; 
      text-align: center;
    }

    .leftBorder{
      border-left: 5px solid #943EAE;
    }

    .rightBorder{
      border-right: 5px solid #943EAE;
    }

    nav{
    font-family: 'Roboto Condensed';
    text-align: center;
    font-size: 2em;
    background-color: #9D9A9D;
    padding: 15px;
   }

    .navBar:hover{
    background: #C7C5C7;
   }

   .navBar{
    border:solid;
    padding: 10px;
    }

  </style>
</head>
<body>
  <nav>
   <a class="navBar" href="../Edejer_LE3/home.htm">Home</a>
   </nav>
	<table>
  		<tr>
    		<td width="400px"></td>
    		<td colspan="2" align="center" width="200"><img src="assets/Csharp.png"></td>
        <td width="400px"></td>
  		</tr>

  		<tr>
    		<td></td>
    		<td class="title" colspan = "2" height="150">History of C#</td>
  		</tr>

      <tr>
        <td></td>
        <td class="cVersion leftBorder" width="150">C# version 1.0</td>
        <td class="cDesc" width="150">When you go back and look, C# version 1.0 looked a lot like Java. As part of its stated design goals for ECMA, it sought to be a "simple, modern, general purpose object-oriented language." At the time, looking like Java meant it achieved those early design goals.</td>
      </tr>

      <tr>
        <td></td>
        <td class="cDesc">C# version 2.0 brought iterators. To put it succinctly, this lets you iterate through the items in a List (or other Enumerable types) with a foreach loop. Having this as a first-class part of the language dramatically enhanced readability of the language and people's ability to reason about the code.</td>
        <td class="cVersion rightBorder">C# version 2.0</td>
      </tr>

      <tr>
        <td></td>
        <td class="cVersion leftBorder">C# version 3.0</td>
        <td class="cDesc">C# version 3.0 came in late 2007, along with Visual Studio 2008, though the full boat of language features would actually come with .NET Framework version 3.5. This version marked a major change in the growth of C#. It established C# as a truly formidable programming language.</td>
      </tr>

      <tr>
        <td></td>
        <td class="cDesc">C# version 4.0 would have had a difficult time living up to the groundbreaking status of version 3.0. With version 3.0, C# had moved the language firmly out from the shadow of Java and into prominence. The language was quickly becoming elegant.</td>
        <td class="cVersion rightBorder">C# version 4.0</td>
      </tr>

      <tr>
        <td></td>
        <td class="cVersion leftBorder">C# version 5.0</td>
        <td class="cDesc">C# version 5.0 was a very focused version of the language. Nearly all of the effort for that version went into another groundbreaking language concept.
        Asynchronous members and 
        Caller info attributes.
        The caller info attribute lets you easily retrieve information about the context in which you're running without resorting to a ton of boilerplate reflection code. It has many uses in diagnostics and logging tasks.</td>
      </tr>

      <tr>
        <td></td>
        <td class="cDesc">With versions 3.0 and 5.0, C# had added some impressive features in an object oriented language. With version 6.0, it would go away from doing a dominant killer feature and instead release many features that delighted users of the language. Here are some of them:
        Static imports, 
        Exception filters, 
        Property initializers, 
        Expression bodied members, 
        Null propagator, 
        String interpolation, 
        nameof operator, 
        Dictionary initializers.</td>
        <td class="cVersion rightBorder">C# version 6.0</td>
      </tr>

      <tr>
        <td></td>
        <td class="cVersion leftBorder">C# version 7.0</td>
        <td class="cDesc">The most recent major version is C# version 7.0. This version has some evolutionary and cool stuff in the vein of C# 6.0, but without the compiler as a service. Here are some of the new features:
        Out variables, 
        Tuples and deconstruction, 
        Pattern matching, 
        Local functions, 
        Expanded expression bodied members, 
        Ref locals and returns.
        All of these features offer cool new capabilities for developers and the opportunity to write even cleaner code than ever. A highlight is condensing the declaration of variables to use with the out keyword and by allowing multiple return values via tuple.</td>
      </tr>

	</table>
</body>
</html>